[["index.html", "AlberdiLab | Aizpurua et al. 2024 Calotriton metagenomics Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Aizpurua et al. 2024 Calotriton metagenomics Ostaizka Aizpurua1 Carlos Cabido2 Garazi Martin Bideguren3 Antton Alberdi4 2024-06-07 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of gut microbiomes of newts across ponds included in a restoration plan. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/calotriton_metagenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ Aranzadi Science Society↩︎ University of Copenhagen, garazi.bideguren@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["prepare-data.html", "Chapter 2 Prepare data 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Wrap working objects", " Chapter 2 Prepare data 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/DMB0156_metadata.tsv.gz&quot;) %&gt;% rename(sample=1) %&gt;% filter(sample_type == &quot;Faecal&quot;) %&gt;% mutate(environment = case_when( longitude &lt; -1.5 ~ &quot;low&quot;, longitude &gt; -1.5 ~ &quot;high&quot;, TRUE ~ NA_character_ # Default case if no match )) 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/DMB0156_counts.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(one_of(c(&quot;genome&quot;,sample_metadata$sample))) 2.1.3 Genome base hits genome_coverage &lt;- read_tsv(&quot;data/DMB0156_coverage.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(one_of(c(&quot;genome&quot;,sample_metadata$sample))) 2.1.4 Genome taxonomy genome_metadata &lt;- read_tsv(&quot;data/DMB0156_mag_info.tsv.gz&quot;) %&gt;% rename(length=mag_size) 2.1.5 Genome tree genome_tree &lt;- read_tree(&quot;data/DMB0156.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.6 Genome annotations Downloading individual annotation files from ERDA using information in Airtable and writing them to a single compressed table takes a while. The following chunk only needs to be run once, to generate the genome_annotations table that is saved in the data directory. Note that the airtable connection requires a personal access token. airtable(&quot;MAGs&quot;, &quot;appWbHBNLE6iAsMRV&quot;) %&gt;% #get base ID from Airtable browser URL read_airtable(., fields = c(&quot;ID&quot;,&quot;mag_name&quot;,&quot;number_genes&quot;,&quot;anno_url&quot;), id_to_col = TRUE) %&gt;% #get 3 columns from MAGs table filter(mag_name %in% paste0(genome_metadata$genome,&quot;.fa&quot;)) %&gt;% #filter by MAG name filter(number_genes &gt; 0) %&gt;% #genes need to exist select(anno_url) %&gt;% #list MAG annotation urls pull() %&gt;% read_tsv() %&gt;% #load all tables rename(gene=1, genome=2, contig=3) %&gt;% #rename first 3 columns write_tsv(file=&quot;data/genome_annotations.tsv.xz&quot;) #write to overall compressed file genome_annotations &lt;- read_tsv(&quot;data/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, file = &quot;data/data.Rdata&quot;) "],["data-statistics.html", "Chapter 3 Data statistics 3.1 Sequencing reads statistics 3.2 DNA fractions 3.3 Recovered microbial fraction", " Chapter 3 Data statistics load(&quot;data/data.Rdata&quot;) 3.1 Sequencing reads statistics sample_metadata %&gt;% summarise(Total=sum(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_post_fastp * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_kix3bekag3mwtg0gkpy7 .table td.tinytable_css_udb1w46wk1mxl3gfhgn0, .table th.tinytable_css_udb1w46wk1mxl3gfhgn0 { border-bottom: solid 0.1em #d3d8dc; } Total Average 171.92 4.91 ± 1.46 3.2 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases) sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% tt() tinytable_m1meukkx296uaz7rz7z5 .table td.tinytable_css_7f9386a9wloqcw09addz, .table th.tinytable_css_7f9386a9wloqcw09addz { border-bottom: solid 0.1em #d3d8dc; } Sample Low quality Mapped to host Unmapped Mapped to MAGs EHI01966 0.3568965 0.005030679 1.9178067 2.507921 EHI01967 0.2692620 0.000709418 0.8339877 4.617569 EHI01968 0.3467658 0.000167184 1.2259195 5.669136 EHI01970 0.2568282 0.000235551 1.1356328 3.939774 EHI01979 0.3068304 0.000429188 1.1643291 3.963429 EHI01982 0.2321305 0.003106822 1.2765585 2.120459 EHI01985 0.3350121 0.000294977 1.3705302 4.091743 EHI01989 0.3249292 0.000570792 1.2444290 3.406020 EHI01992 0.2112149 0.000650860 1.3810604 2.863645 EHI01995 0.2441431 0.001014484 1.0559948 2.625781 EHI02065 0.2881934 0.000248787 0.9495023 3.524029 EHI02067 0.4887927 0.009035522 1.5062498 3.314287 EHI02079 0.4087200 0.001541555 1.0763461 3.216692 EHI02088 0.5380240 0.002508850 1.7069668 4.880649 EHI02097 1.1086051 0.001111047 1.1464450 4.177690 EHI02105 0.4367774 0.006671326 0.7868596 1.606939 EHI02582 0.1565447 0.000041661 0.7099037 3.061117 EHI02584 0.2131393 0.000243149 1.3719978 3.909083 EHI02585 0.3055922 0.000693419 1.3837783 4.156742 EHI02587 0.2002879 0.001053113 1.1718219 3.773711 EHI02592 0.2204754 0.000807086 1.0309674 3.998601 EHI02598 0.1922634 0.000085434 1.1517125 3.984019 EHI02602 0.1798841 0.000148220 1.2512663 2.802077 EHI02603 0.2165665 0.002208379 1.3526444 3.734602 EHI02607 0.2170496 0.000239951 1.5274046 3.978722 EHI02612 0.1376030 0.000170810 0.6921896 2.540514 EHI02615 0.1893992 0.000351599 0.6650246 1.618650 EHI02617 0.1957782 0.000243466 1.3981847 2.879747 EHI02619 0.2292718 0.000086283 0.9636172 3.865591 EHI02624 0.2077297 0.000351284 1.0437963 3.443889 EHI02625 0.1169758 0.000023503 0.5396744 1.996437 EHI02630 0.1994379 0.000258866 0.9279985 3.240507 EHI02632 0.3725667 0.000748839 1.4198031 2.929934 EHI02633 0.2780827 0.000903128 1.3810886 5.477885 EHI02639 0.4685676 0.001126284 2.1791314 8.022893 sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% summarise(across(where(is.numeric), mean, na.rm = TRUE)) %&gt;% tt() tinytable_4r5om9aa8ktwbpfptris .table td.tinytable_css_qrubyzmzxm7r0oe18elc, .table th.tinytable_css_qrubyzmzxm7r0oe18elc { border-bottom: solid 0.1em #d3d8dc; } Low quality Mapped to host Unmapped Mapped to MAGs 0.2985812 0.001231758 1.198304 3.598299 sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) 3.3 Recovered microbial fraction singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify singlem_table %&gt;% pivot_longer(!sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% mutate(proportion = factor(proportion, levels = c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, color=proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ theme_classic() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction (%)&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;right&quot;) damr &lt;- singlem_table %&gt;% mutate(damr=ifelse(is.na(singlem_proportion),100,mags_proportion/singlem_proportion*100)) %&gt;% select(sample,damr) damr %&gt;% tt() tinytable_xzpeofcpw1h4r1ivpjk0 .table td.tinytable_css_smmdlbao96r2dgg43ku4, .table th.tinytable_css_smmdlbao96r2dgg43ku4 { border-bottom: solid 0.1em #d3d8dc; } sample damr EHI01966 100.00000 EHI01967 100.00000 EHI01968 100.00000 EHI01970 100.00000 EHI01979 100.00000 EHI01982 100.00000 EHI01985 100.00000 EHI01989 100.00000 EHI01992 100.00000 EHI01995 100.00000 EHI02065 100.00000 EHI02067 100.00000 EHI02079 100.00000 EHI02088 100.00000 EHI02097 100.00000 EHI02105 100.00000 EHI02582 100.00000 EHI02584 99.78431 EHI02585 100.00000 EHI02587 100.00000 EHI02592 100.00000 EHI02598 100.00000 EHI02602 100.00000 EHI02603 100.00000 EHI02607 100.00000 EHI02612 100.00000 EHI02615 100.00000 EHI02617 100.00000 EHI02619 100.00000 EHI02624 100.00000 EHI02625 100.00000 EHI02630 100.00000 EHI02632 100.00000 EHI02633 100.00000 EHI02639 100.00000 damr %&gt;% filter(damr&gt;95) %&gt;% nrow() [1] 35 damr %&gt;% summarise(mean=mean(damr),sd=sd(damr)) %&gt;% tt() tinytable_kfh2bb3qd4egnxkwiieu .table td.tinytable_css_fvlfaco81mjxx0x2ifth, .table th.tinytable_css_fvlfaco81mjxx0x2ifth { border-bottom: solid 0.1em #d3d8dc; } mean sd 99.99384 0.03645853 "],["mag-catalogue.html", "Chapter 4 MAG catalogue 4.1 Genome phylogeny 4.2 Genome quality 4.3 Functional overview 4.4 Functional ordination", " Chapter 4 MAG catalogue load(&quot;data/data.Rdata&quot;) 4.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) ## Taxonomy overview genome_metadata %&gt;% group_by(phylum) %&gt;% summarise(mag_n=n()) %&gt;% arrange(-mag_n) %&gt;% tt() tinytable_t9boi0reppakzd4sr3p0 .table td.tinytable_css_flsb7oyqtrr72miraf0c, .table th.tinytable_css_flsb7oyqtrr72miraf0c { border-bottom: solid 0.1em #d3d8dc; } phylum mag_n p__Bacteroidota 191 p__Bacillota_A 175 p__Pseudomonadota 87 p__Bacillota 23 p__Verrucomicrobiota 18 p__Cyanobacteriota 12 p__Bacillota_C 11 p__Desulfobacterota 7 p__Fusobacteriota 6 p__Bacillota_B 4 p__Deferribacterota 2 p__Elusimicrobiota 2 p__Chlamydiota 1 4.2 Genome quality genome_metadata %&gt;% summarise(completeness_mean=mean(completeness) %&gt;% round(2) %&gt;% as.character(), completeness_sd=sd(completeness) %&gt;% round(2) %&gt;% as.character(), contamination_mean=mean(contamination) %&gt;% round(2), contamination_sd=sd(contamination) %&gt;% round(2)) %&gt;% unite(&quot;Completeness&quot;,completeness_mean, completeness_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% unite(&quot;Contamination&quot;,contamination_mean, contamination_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_4wpt8qk1njpngsdbo92i .table td.tinytable_css_l13p8lihuhtt2n129h0o, .table th.tinytable_css_l13p8lihuhtt2n129h0o { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 85.01 ± 16.2 1.68 ± 2.25 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 4.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 5 Community composition 5.1 Taxonomy overview 5.2 Taxonomy boxplot", " Chapter 5 Community composition load(&quot;data/data.Rdata&quot;) 5.1 Taxonomy overview 5.1.1 Stacked barplot genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ environment + longitude, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) 5.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_ozs4hxe8te9wy06vn5ub .table td.tinytable_css_lwcv8hphjpgvlloo7mxj, .table th.tinytable_css_lwcv8hphjpgvlloo7mxj { border-bottom: solid 0.1em #d3d8dc; } phylum mean sd p__Bacteroidota 5.689285e-01 0.1540091282 p__Bacillota_A 1.743849e-01 0.0700812372 p__Pseudomonadota 1.113540e-01 0.1500626212 p__Verrucomicrobiota 6.181210e-02 0.0587656502 p__Bacillota 3.203183e-02 0.0403185065 p__Desulfobacterota 2.632570e-02 0.0270005049 p__Fusobacteriota 8.571358e-03 0.0145576339 p__Bacillota_C 6.103158e-03 0.0072686479 p__Deferribacterota 4.297397e-03 0.0057855372 p__Cyanobacteriota 2.749617e-03 0.0035676690 p__Bacillota_B 2.476044e-03 0.0022425682 p__Elusimicrobiota 8.931074e-04 0.0024994217 p__Chlamydiota 7.224535e-05 0.0001589365 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(alpha=0.5) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) 5.2 Taxonomy boxplot 5.2.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_rfj6j08x5xxcp9t349g1 .table td.tinytable_css_149bo3446sk0jg29sm7q, .table th.tinytable_css_149bo3446sk0jg29sm7q { border-bottom: solid 0.1em #d3d8dc; } family mean sd f__Bacteroidaceae 2.471960e-01 0.1325115215 f__Rikenellaceae 1.160874e-01 0.0684497647 f__Tannerellaceae 1.019561e-01 0.0569863869 f__Akkermansiaceae 6.066164e-02 0.0582934333 f__Marinifilaceae 5.988787e-02 0.0475335342 f__Lachnospiraceae 5.808688e-02 0.0415927321 f__Ruminococcaceae 5.115411e-02 0.0373298162 f__Enterobacteriaceae 4.838945e-02 0.1181156814 f__Aeromonadaceae 3.001583e-02 0.0460225099 f__Desulfovibrionaceae 2.632570e-02 0.0270005049 f__ 2.477546e-02 0.0212954773 f__Erysipelotrichaceae 1.773323e-02 0.0146642456 f__Clostridiaceae 1.667605e-02 0.0246251130 f__Mycoplasmoidaceae 1.307127e-02 0.0392437991 f__Moraxellaceae 1.269634e-02 0.0263873382 f__Oscillospiraceae 1.049036e-02 0.0073022058 f__Cellulosilyticaceae 9.674865e-03 0.0174362664 f__Muribaculaceae 9.275306e-03 0.0103502184 f__Fusobacteriaceae 8.571358e-03 0.0145576339 f__CHK158-818 7.802093e-03 0.0092742369 f__Anaerovoracaceae 6.418852e-03 0.0101906138 f__CAG-239 5.594649e-03 0.0085961651 f__Butyricicoccaceae 5.536744e-03 0.0153801549 f__Peptostreptococcaceae 4.616539e-03 0.0103902778 f__P3 4.487408e-03 0.0075825882 f__Mucispirillaceae 4.297397e-03 0.0057855372 f__Pseudomonadaceae 3.189040e-03 0.0060054779 f__Acutalibacteraceae 3.081339e-03 0.0045602908 f__UBA3637 2.817205e-03 0.0073111663 f__Gastranaerophilaceae 2.636235e-03 0.0035305519 f__UBA932 2.456666e-03 0.0033990559 f__Peptococcaceae 2.400061e-03 0.0022145205 f__Succinispiraceae 2.313402e-03 0.0024808879 f__Chromobacteriaceae 2.301141e-03 0.0099058815 f__Pumilibacteraceae 2.194988e-03 0.0025294376 f__Anaerotignaceae 2.153835e-03 0.0024871306 f__Massilibacillaceae 2.101814e-03 0.0044747006 f__Shewanellaceae 1.007172e-03 0.0039548332 f__Chitinibacteraceae 1.000738e-03 0.0024966652 f__UBA3830 9.957148e-04 0.0015639545 f__Xanthobacteraceae 9.310902e-04 0.0037227287 f__Coprobacillaceae 9.258861e-04 0.0021323691 f__Elusimicrobiaceae 8.931074e-04 0.0024994217 f__Burkholderiaceae_A 8.678700e-04 0.0024729975 f__UBA1997 7.055924e-04 0.0021616219 f__Coprobacteraceae 6.020864e-04 0.0009582824 f__Sedimentibacteraceae 5.766507e-04 0.0007547715 f__UBA1820 5.595296e-04 0.0008649613 f__CAG-508 4.668877e-04 0.0025549082 f__Eubacteriaceae 3.514209e-04 0.0006269121 f__Borkfalkiaceae 2.249938e-04 0.0004160226 f__CALYAR01 1.572887e-04 0.0002786771 f__Enterococcaceae 1.502679e-04 0.0008889969 f__CALVMC01 9.823090e-05 0.0005216160 f__UBA660 7.705595e-05 0.0001929114 f__UBA7702 7.598288e-05 0.0001804883 f__GCF-1484045 7.412128e-05 0.0004385074 f__Chlamydiaceae 7.224535e-05 0.0001589365 f__UBA3700 6.138625e-05 0.0003631659 family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() # Per origin family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + facet_grid(.~environment)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 5.2.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,phylum,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) genus_summary_sort &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) genus_summary_sort %&gt;% tt() tinytable_jhj6ju4891co4sjyph7d .table td.tinytable_css_f96a7mqpbq1bnwetgplr, .table th.tinytable_css_f96a7mqpbq1bnwetgplr { border-bottom: solid 0.1em #d3d8dc; } genus mean sd Bacteroides 2.435662e-01 0.1318569731 Parabacteroides 7.712066e-02 0.0442873518 Mucinivorans 5.485809e-02 0.0441493383 Odoribacter 3.998704e-02 0.0324395582 Akkermansia 3.699454e-02 0.0444888608 Aeromonas 3.001583e-02 0.0460225099 Parabacteroides_B 2.483548e-02 0.0277427000 Hafnia 2.227064e-02 0.1156606985 JADFUS01 1.771383e-02 0.0105985347 Alistipes 1.471418e-02 0.0109627462 Plesiomonas 1.454771e-02 0.0327940636 UBA866 1.419549e-02 0.0171150172 Clostridium 1.372645e-02 0.0226197767 Bilophila 1.331878e-02 0.0198622466 Acinetobacter 1.269634e-02 0.0263873382 14-2 1.233104e-02 0.0265894295 Clostridium_Q 1.171644e-02 0.0162699532 Mycoplasma_L 1.065393e-02 0.0394829437 Dielma 1.042251e-02 0.0127504085 CAJGBR01 9.607999e-03 0.0085952436 HGM05232 9.275306e-03 0.0103502184 Cetobacterium 7.826324e-03 0.0142283544 Gallibacteroides 7.802093e-03 0.0092742369 JAIHAL01 6.871180e-03 0.0126256687 Angelakisella 6.505557e-03 0.0057582329 Buttiauxella 6.133033e-03 0.0189800892 RGIG3102 5.734736e-03 0.0099264590 Hydrogenoanaerobacterium 5.697736e-03 0.0062384576 SZUA-378 4.928183e-03 0.0137349713 Pseudoflavonifractor 4.242479e-03 0.0043794439 Anaerotruncus 4.137290e-03 0.0042016918 Anaerovorax 4.013726e-03 0.0091630296 Butyricimonas 3.937359e-03 0.0043410385 UMGS1251 3.563237e-03 0.0054497977 Pseudomonas_E 3.189040e-03 0.0060054779 Sarcina 2.949596e-03 0.0057753291 Intestinimonas 2.941046e-03 0.0028260997 Mobilisporobacter 2.538844e-03 0.0044476714 Tidjanibacter 2.526410e-03 0.0022745134 Hungatella_A 2.509723e-03 0.0030300415 Bacteroides_G 2.482777e-03 0.0030685072 Egerieousia 2.456666e-03 0.0033990559 Malacoplasma 2.417336e-03 0.0054607581 Craterilacuibacter 2.301141e-03 0.0099058815 Alistipes_A 2.241040e-03 0.0019536428 Budvicia 2.215264e-03 0.0109761121 Avirikenella 1.958926e-03 0.0027352825 Paraclostridium 1.949494e-03 0.0097500062 Anaerorhabdus 1.842258e-03 0.0027674736 Serratia_A 1.746917e-03 0.0067047320 UMGS1202 1.735431e-03 0.0017442272 JAGAJR01 1.657831e-03 0.0037723464 Romboutsia_A 1.631884e-03 0.0027175524 Amedibacillus 1.617023e-03 0.0030514424 Gallalistipes 1.467926e-03 0.0012004170 JAAYQI01 1.419084e-03 0.0023350948 Intestinibacillus 1.312996e-03 0.0016471339 Phocea 1.264862e-03 0.0022185638 JAHHTP01 1.218787e-03 0.0014210421 Massiliimalia 1.160964e-03 0.0023829475 RGIG4140 1.144305e-03 0.0064919092 Aminipila 1.100200e-03 0.0023493631 Copranaerobaculum 1.063109e-03 0.0042027196 JAJBUQ01 1.044411e-03 0.0017072520 Romboutsia_D 1.035162e-03 0.0025533354 Shewanella 1.007172e-03 0.0039548332 Ruthenibacterium 1.000989e-03 0.0016556573 Deefgea 1.000738e-03 0.0024966652 Bradyrhizobium 9.310902e-04 0.0037227287 Coprobacillus 9.258861e-04 0.0021323691 Rikenella 8.870162e-04 0.0014086439 JAEZVV01 8.678700e-04 0.0024729975 RGIG7389 8.305951e-04 0.0010529671 JAGNZR01 7.450332e-04 0.0026332724 Kluyvera 7.354109e-04 0.0033265669 Bacilliculturomica 7.159179e-04 0.0013304547 Spyradomonas 7.146271e-04 0.0012823418 WRKB01 6.465109e-04 0.0015707534 Evtepia 6.395747e-04 0.0006982343 Anaerotignum 6.131710e-04 0.0012176488 Coprobacter 6.020864e-04 0.0009582824 MGBC133411 5.894437e-04 0.0009156972 Negativibacillus 5.804496e-04 0.0006835800 Robinsoniella 5.353474e-04 0.0010897149 IOR16 5.023546e-04 0.0007464032 Muricomes 4.994820e-04 0.0008485060 UBA7488 4.750299e-04 0.0009978028 RGIG8482 4.668877e-04 0.0025549082 CAKVBE01 4.333183e-04 0.0014714300 Citrobacter 4.112408e-04 0.0013787481 Faecalimonas 3.688513e-04 0.0008326873 Amedibacterium 3.478068e-04 0.0016606843 UBA1174 3.335192e-04 0.0019010146 SIG603 3.300671e-04 0.0005805146 Yersinia 3.292357e-04 0.0012233173 HGM16780 3.067475e-04 0.0013455312 Fimivivens 3.047193e-04 0.0004088726 UBA1794 3.009228e-04 0.0005607342 Longicatena 2.583333e-04 0.0015283205 Dysosmobacter 2.037202e-04 0.0003972865 JAGPHI01 1.805939e-04 0.0004150693 Enterococcus 1.502679e-04 0.0008889969 CALXSC01 1.224638e-04 0.0004012663 Hespellia 1.135437e-04 0.0002278677 Massilioclostridium 1.117290e-04 0.0002591622 51-20 9.051798e-05 0.0005355116 MGBC107952 7.705595e-05 0.0001929114 Scatenecus 7.620763e-05 0.0004062042 Cryptoclostridium 7.598288e-05 0.0001804883 Lactonifactor 6.094989e-05 0.0002283341 CAZU01 4.914752e-05 0.0002907606 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() #Per pond genus_summary %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus=factor(genus, levels=rev(genus_summary_sort %&gt;% pull(genus)))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.5) + facet_grid(.~environment)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) "],["alpha-diversity.html", "Chapter 6 Alpha diversity", " Chapter 6 Alpha diversity load(&quot;data/data.Rdata&quot;) # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% filter(genome %in% rownames(dist)) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) #Richness alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;richness&quot;) %&gt;% ggplot(aes(y = value, x = environment, group=environment, color=environment, fill=environment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Neutral alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggplot(aes(y = value, x = environment, group=environment, color=environment, fill=environment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Phylogenetic alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;phylogenetic&quot;) %&gt;% ggplot(aes(y = value, x = environment, group=environment, color=environment, fill=environment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Functional alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;functional&quot;) %&gt;% ggplot(aes(y = value, x = environment, group=environment, color=environment, fill=environment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) "],["beta-diversity.html", "Chapter 7 Beta diversity", " Chapter 7 Beta diversity load(&quot;data/data.Rdata&quot;) beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, dist = dist) 7.0.1 Permanova #Richness betadisper(beta_q0n$C, sample_metadata$Origin) %&gt;% permutest(., pairwise = TRUE) adonis2(beta_q0n$C ~ Origin, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(Location)) %&gt;% broom::tidy() %&gt;% tt() #Neutral diversity betadisper(beta_q1n$C, sample_metadata$Origin) %&gt;% permutest(., pairwise = TRUE) adonis2(beta_q1n$C ~ Origin, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(Location)) %&gt;% broom::tidy() %&gt;% tt() #Phylogenetic diversity betadisper(beta_q1p$C, sample_metadata$Origin) %&gt;% permutest(., pairwise = TRUE) adonis2(beta_q1p$C ~ Origin, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(Location)) %&gt;% broom::tidy() %&gt;% tt() #Functional diversity betadisper(beta_q1f$C, sample_metadata$Origin) %&gt;% permutest(., pairwise = TRUE) adonis2(beta_q1f$C ~ Origin, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(Location)) %&gt;% broom::tidy() %&gt;% tt() 7.0.2 Richness diversity plot beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(Origin,Location) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = Origin, fill = Origin, shape = as.factor(Location))) + scale_color_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) 7.0.3 Neutral diversity plot beta_q1n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(Origin,Location) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = Origin, fill = Origin, shape = as.factor(Location))) + scale_color_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
