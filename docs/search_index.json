[["index.html", "AlberdiLab | Aizpurua et al. 2024 Calotriton metagenomics Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Aizpurua et al. 2024 Calotriton metagenomics Ostaizka Aizpurua1 Carlos Cabido2 Garazi Martin Bideguren3 Antton Alberdi4 2024-06-25 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of gut microbiomes of newts across ponds included in a restoration plan. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/calotriton_metagenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ Aranzadi Science Society↩︎ University of Copenhagen, garazi.bideguren@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["prepare-data.html", "Chapter 2 Prepare data 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Wrap working objects", " Chapter 2 Prepare data 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/DMB0156_metadata.tsv.gz&quot;) %&gt;% rename(sample=1) %&gt;% filter(sample_type == &quot;Faecal&quot;) %&gt;% mutate(environment = case_when( longitude &lt; -1.5 ~ &quot;low&quot;, longitude &gt; -1.5 ~ &quot;high&quot;, TRUE ~ NA_character_ # Default case if no match )) sample_metadata &lt;- read_csv(&quot;data/sample_metadata.csv&quot;) %&gt;% filter(!sample %in% c(&quot;EHI02067&quot;, &quot;EHI02105&quot;, &quot;EHI02079&quot;, &quot;EHI02097&quot;)) #remove repeated samples 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/DMB0156_counts.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(one_of(c(&quot;genome&quot;,sample_metadata$sample))) 2.1.3 Genome base hits genome_coverage &lt;- read_tsv(&quot;data/DMB0156_coverage.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(one_of(c(&quot;genome&quot;,sample_metadata$sample)))%&gt;% semi_join(., genome_metadata, by = &quot;genome&quot;)%&gt;% arrange(match(genome, read_counts$genome)) 2.1.4 Genome taxonomy genome_metadata &lt;- read_tsv(&quot;data/DMB0156_mag_info.tsv.gz&quot;) %&gt;% rename(length=mag_size)%&gt;% semi_join(., read_counts, by = &quot;genome&quot;) %&gt;% arrange(match(genome,read_counts$genome)) 2.1.5 Genome tree genome_tree &lt;- read_tree(&quot;data/DMB0156.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.6 Genome annotations Downloading individual annotation files from ERDA using information in Airtable and writing them to a single compressed table takes a while. The following chunk only needs to be run once, to generate the genome_annotations table that is saved in the data directory. Note that the airtable connection requires a personal access token. airtable(&quot;MAGs&quot;, &quot;appWbHBNLE6iAsMRV&quot;) %&gt;% #get base ID from Airtable browser URL read_airtable(., fields = c(&quot;ID&quot;,&quot;mag_name&quot;,&quot;number_genes&quot;,&quot;anno_url&quot;), id_to_col = TRUE) %&gt;% #get 3 columns from MAGs table filter(mag_name %in% paste0(genome_metadata$genome,&quot;.fa&quot;)) %&gt;% #filter by MAG name filter(number_genes &gt; 0) %&gt;% #genes need to exist select(anno_url) %&gt;% #list MAG annotation urls pull() %&gt;% read_tsv() %&gt;% #load all tables rename(gene=1, genome=2, contig=3) %&gt;% #rename first 3 columns write_tsv(file=&quot;data/genome_annotations.tsv.xz&quot;) #write to overall compressed file genome_annotations &lt;- read_tsv(&quot;data/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.3 Distill annotations into GIFTs genome_gifts_raw &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) genome_counts_filt_func &lt;- genome_counts_filt[genome_counts_filt$genome %in% rownames(genome_gifts),] genome_gifts &lt;- genome_gifts_raw[genome_counts_filt_func$genome,] genome_gifts &lt;- genome_gifts[, colSums(genome_gifts != 0) &gt; 0] 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) altitude_colors&lt;- c(&quot;#429ef5&quot;,&quot;#a8c3f0&quot;,&quot;#f56c42&quot;,&quot;#f29c80&quot;) treatment_colors &lt;- c(&quot;#429ef5&quot;,&quot;#f56042&quot;) 2.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts_raw, genome_gifts, phylum_colors, altitude_colors, treatment_colors, file = &quot;data/data.Rdata&quot;) "],["data-statistics.html", "Chapter 3 Data statistics 3.1 Sequencing reads statistics 3.2 DNA fractions 3.3 Recovered microbial fraction", " Chapter 3 Data statistics load(&quot;data/data.Rdata&quot;) 3.1 Sequencing reads statistics sample_metadata %&gt;% summarise(Total=sum(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_post_fastp * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_jk2l0tyatrn4mpnd0z1o .table td.tinytable_css_4x8op5btxkj3ojkfhgwi, .table th.tinytable_css_4x8op5btxkj3ojkfhgwi { border-bottom: solid 0.1em #d3d8dc; } Total Average 154.38 4.98 ± 1.49 3.2 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases) sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% tt() tinytable_14b9xmm26q1ssp0divhg .table td.tinytable_css_n1ra3cmqceeyqtfnohjb, .table th.tinytable_css_n1ra3cmqceeyqtfnohjb { border-bottom: solid 0.1em #d3d8dc; } Sample Low quality Mapped to host Unmapped Mapped to MAGs EHI01966 0.3568965 0.005030679 1.9178067 2.507921 EHI01967 0.2692620 0.000709418 0.8339877 4.617569 EHI01968 0.3467658 0.000167184 1.2259195 5.669136 EHI01970 0.2568282 0.000235551 1.1356328 3.939774 EHI01979 0.3068304 0.000429188 1.1643291 3.963429 EHI01982 0.2321305 0.003106822 1.2765585 2.120459 EHI01985 0.3350121 0.000294977 1.3705302 4.091743 EHI01989 0.3249292 0.000570792 1.2444290 3.406020 EHI01992 0.2112149 0.000650860 1.3810604 2.863645 EHI01995 0.2441431 0.001014484 1.0559948 2.625781 EHI02065 0.2881934 0.000248787 0.9495023 3.524029 EHI02088 0.5380240 0.002508850 1.7069668 4.880649 EHI02582 0.1565447 0.000041661 0.7099037 3.061117 EHI02584 0.2131393 0.000243149 1.3719978 3.909083 EHI02585 0.3055922 0.000693419 1.3837783 4.156742 EHI02587 0.2002879 0.001053113 1.1718219 3.773711 EHI02592 0.2204754 0.000807086 1.0309674 3.998601 EHI02598 0.1922634 0.000085434 1.1517125 3.984019 EHI02602 0.1798841 0.000148220 1.2512663 2.802077 EHI02603 0.2165665 0.002208379 1.3526444 3.734602 EHI02607 0.2170496 0.000239951 1.5274046 3.978722 EHI02612 0.1376030 0.000170810 0.6921896 2.540514 EHI02615 0.1893992 0.000351599 0.6650246 1.618650 EHI02617 0.1957782 0.000243466 1.3981847 2.879747 EHI02619 0.2292718 0.000086283 0.9636172 3.865591 EHI02624 0.2077297 0.000351284 1.0437963 3.443889 EHI02625 0.1169758 0.000023503 0.5396744 1.996437 EHI02630 0.1994379 0.000258866 0.9279985 3.240507 EHI02632 0.3725667 0.000748839 1.4198031 2.929934 EHI02633 0.2780827 0.000903128 1.3810886 5.477885 EHI02639 0.4685676 0.001126284 2.1791314 8.022893 sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% summarise(across(where(is.numeric), mean, na.rm = TRUE)) %&gt;% tt() tinytable_kqjav829rt34inc2v4e2 .table td.tinytable_css_id1oevs4xcpbjvqrbdjg, .table th.tinytable_css_id1oevs4xcpbjvqrbdjg { border-bottom: solid 0.1em #d3d8dc; } Low quality Mapped to host Unmapped Mapped to MAGs 0.2583047 0.0007984537 1.207249 3.665319 sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) 3.3 Recovered microbial fraction singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify singlem_table %&gt;% pivot_longer(!sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% mutate(proportion = factor(proportion, levels = c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, color=proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ theme_classic() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction (%)&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;right&quot;) damr &lt;- singlem_table %&gt;% mutate(damr=ifelse(is.na(singlem_proportion),100,mags_proportion/singlem_proportion*100)) %&gt;% select(sample,damr) damr %&gt;% tt() tinytable_hworkj9ap5au1sknb6ju .table td.tinytable_css_c56qxelabf2hd46kuhhx, .table th.tinytable_css_c56qxelabf2hd46kuhhx { border-bottom: solid 0.1em #d3d8dc; } sample damr EHI01966 100.00000 EHI01967 100.00000 EHI01968 100.00000 EHI01970 100.00000 EHI01979 100.00000 EHI01982 100.00000 EHI01985 100.00000 EHI01989 100.00000 EHI01992 100.00000 EHI01995 100.00000 EHI02065 100.00000 EHI02088 100.00000 EHI02582 100.00000 EHI02584 99.78431 EHI02585 100.00000 EHI02587 100.00000 EHI02592 100.00000 EHI02598 100.00000 EHI02602 100.00000 EHI02603 100.00000 EHI02607 100.00000 EHI02612 100.00000 EHI02615 100.00000 EHI02617 100.00000 EHI02619 100.00000 EHI02624 100.00000 EHI02625 100.00000 EHI02630 100.00000 EHI02632 100.00000 EHI02633 100.00000 EHI02639 100.00000 damr %&gt;% filter(damr&gt;95) %&gt;% nrow() [1] 31 damr %&gt;% summarise(mean=mean(damr),sd=sd(damr)) %&gt;% tt() tinytable_o3jxxemvq6j3i3nszl6t .table td.tinytable_css_lwrv7qnwtdyky5rq5esc, .table th.tinytable_css_lwrv7qnwtdyky5rq5esc { border-bottom: solid 0.1em #d3d8dc; } mean sd 99.99304 0.03873935 "],["mag-catalogue.html", "Chapter 4 MAG catalogue 4.1 Genome phylogeny 4.2 Taxonomy overview 4.3 Genome quality 4.4 Functional overview 4.5 Functional ordination", " Chapter 4 MAG catalogue load(&quot;data/data.Rdata&quot;) 4.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=3.6, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=4.7, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=5.3, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 4.2 Taxonomy overview genome_metadata %&gt;% group_by(phylum) %&gt;% summarise(mag_n=n()) %&gt;% arrange(-mag_n) %&gt;% tt() tinytable_75jubd21tb9cr0r2r9s4 .table td.tinytable_css_hli1rcp964nohpg28qcg, .table th.tinytable_css_hli1rcp964nohpg28qcg { border-bottom: solid 0.1em #d3d8dc; } phylum mag_n p__Bacteroidota 191 p__Bacillota_A 175 p__Pseudomonadota 87 p__Bacillota 23 p__Verrucomicrobiota 18 p__Cyanobacteriota 12 p__Bacillota_C 11 p__Desulfobacterota 7 p__Fusobacteriota 6 p__Bacillota_B 4 p__Deferribacterota 2 p__Elusimicrobiota 2 p__Chlamydiota 1 4.3 Genome quality genome_metadata %&gt;% summarise(completeness_mean=mean(completeness) %&gt;% round(2) %&gt;% as.character(), completeness_sd=sd(completeness) %&gt;% round(2) %&gt;% as.character(), contamination_mean=mean(contamination) %&gt;% round(2), contamination_sd=sd(contamination) %&gt;% round(2)) %&gt;% unite(&quot;Completeness&quot;,completeness_mean, completeness_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% unite(&quot;Contamination&quot;,contamination_mean, contamination_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_z9zuxtxbkghtvyuomsfv .table td.tinytable_css_r23hq4nimy0sy8bl1w4x, .table th.tinytable_css_r23hq4nimy0sy8bl1w4x { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 85.01 ± 16.2 1.68 ± 2.25 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.4 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 4.5 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 5 Community composition 5.1 Taxonomy overview 5.2 Taxonomy boxplot", " Chapter 5 Community composition load(&quot;data/data.Rdata&quot;) 5.1 Taxonomy overview 5.1.1 Stacked barplot genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ altitude + treatment, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) Number of bacteria phyla [1] 13 5.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum,region, environment,treatment) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(total_mean=mean(relabun*100, na.rm=T), total_sd=sd(relabun*100, na.rm=T)) %&gt;% mutate(total=str_c(round(total_mean,2),&quot;±&quot;,round(total_sd,2))) %&gt;% arrange(-total_mean) %&gt;% dplyr::select(phylum,total) %&gt;% tt() tinytable_edlxp2gtxjzbfmr5tvv4 .table td.tinytable_css_3qy1kfix0hb1xvtgxzkg, .table th.tinytable_css_3qy1kfix0hb1xvtgxzkg { border-bottom: solid 0.1em #d3d8dc; } phylum total p__Bacteroidota 56.02±16.86 p__Bacillota_A 17.72±6.39 p__Pseudomonadota 11.57±13.5 p__Bacillota 5.48±8.81 p__Verrucomicrobiota 4.12±4.51 p__Desulfobacterota 1.79±1.74 p__Fusobacteriota 1.37±2.18 p__Bacillota_C 0.65±0.93 p__Deferribacterota 0.6±0.77 p__Cyanobacteriota 0.37±0.5 p__Bacillota_B 0.15±0.14 p__Elusimicrobiota 0.13±0.43 p__Chlamydiota 0.03±0.08 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(alpha=0.5) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) 5.2 Taxonomy boxplot 5.2.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_9l9hl5px4i5ng1aedogp .table td.tinytable_css_lzchzjsz3n5bbuyckvc5, .table th.tinytable_css_lzchzjsz3n5bbuyckvc5 { border-bottom: solid 0.1em #d3d8dc; } family mean sd f__Bacteroidaceae 2.747168e-01 1.407196e-01 f__Rikenellaceae 1.391991e-01 7.396770e-02 f__Tannerellaceae 7.720647e-02 4.561100e-02 f__Ruminococcaceae 5.793749e-02 4.189494e-02 f__Lachnospiraceae 4.729335e-02 3.337791e-02 f__Enterobacteriaceae 4.336104e-02 9.482159e-02 f__Akkermansiaceae 3.968436e-02 4.368196e-02 f__Marinifilaceae 3.738796e-02 3.555050e-02 f__Aeromonadaceae 3.216280e-02 5.116161e-02 f__Mycoplasmoidaceae 3.122255e-02 8.895328e-02 f__Erysipelotrichaceae 2.221957e-02 1.788968e-02 f__ 1.956762e-02 1.924658e-02 f__Desulfovibrionaceae 1.794839e-02 1.740772e-02 f__Fusobacteriaceae 1.368885e-02 2.180794e-02 f__Clostridiaceae 1.366840e-02 1.906657e-02 f__Moraxellaceae 1.342615e-02 2.724203e-02 f__Oscillospiraceae 1.250406e-02 8.936335e-03 f__Cellulosilyticaceae 1.133545e-02 2.080456e-02 f__Butyricicoccaceae 9.655203e-03 2.753799e-02 f__CAG-239 8.744086e-03 1.388356e-02 f__CHK158-818 7.109525e-03 8.651652e-03 f__Anaerovoracaceae 6.170476e-03 9.224529e-03 f__Mucispirillaceae 6.016547e-03 7.689861e-03 f__Peptostreptococcaceae 5.928800e-03 1.660295e-02 f__P3 5.211451e-03 8.758697e-03 f__Muribaculaceae 5.091676e-03 6.107022e-03 f__UBA3637 5.049775e-03 1.024626e-02 f__Gastranaerophilaceae 3.475214e-03 4.812600e-03 f__Anaerotignaceae 2.499790e-03 2.422026e-03 f__UBA932 2.488889e-03 4.069053e-03 f__Acutalibacteraceae 2.311710e-03 3.337834e-03 f__Chromobacteriaceae 2.083279e-03 9.013217e-03 f__UBA3830 2.074625e-03 3.362372e-03 f__Pumilibacteraceae 2.041528e-03 2.464352e-03 f__Massilibacillaceae 1.915668e-03 3.861941e-03 f__Succinispiraceae 1.875117e-03 2.130021e-03 f__UBA1997 1.620725e-03 4.440974e-03 f__Chitinibacteraceae 1.502709e-03 3.412014e-03 f__Pseudomonadaceae 1.420060e-03 2.808340e-03 f__Peptococcaceae 1.264453e-03 1.169734e-03 f__Elusimicrobiaceae 1.261359e-03 4.278766e-03 f__Burkholderiaceae_A 9.378374e-04 2.509149e-03 f__CAG-508 9.213532e-04 4.996540e-03 f__Coprobacteraceae 9.079215e-04 1.527339e-03 f__Shewanellaceae 8.297368e-04 2.690699e-03 f__Coprobacillaceae 7.318328e-04 1.542562e-03 f__Sedimentibacteraceae 6.927406e-04 1.016728e-03 f__Xanthobacteraceae 6.440180e-04 2.407832e-03 f__UBA1820 5.396558e-04 9.137754e-04 f__GCF-1484045 4.480219e-04 2.494481e-03 f__CALVMC01 3.833973e-04 1.889124e-03 f__Chlamydiaceae 3.250519e-04 8.432063e-04 f__Borkfalkiaceae 3.144307e-04 5.804720e-04 f__UBA7702 2.807538e-04 6.721141e-04 f__Eubacteriaceae 2.693395e-04 4.861755e-04 f__UBA3700 1.657496e-04 9.228548e-04 f__CALYAR01 1.366137e-04 2.325915e-04 f__Enterococcaceae 1.029579e-04 5.732451e-04 f__UBA660 2.552412e-05 7.936623e-05 family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() # Per origin family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + facet_grid(.~environment)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 5.2.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,phylum,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) genus_summary_sort &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) genus_summary_sort %&gt;% tt() tinytable_eemn2npu5t74z6g0u5mv .table td.tinytable_css_saqrue3qbp92ghuzmg1x, .table th.tinytable_css_saqrue3qbp92ghuzmg1x { border-bottom: solid 0.1em #d3d8dc; } genus mean sd Bacteroides 2.676340e-01 1.399196e-01 Parabacteroides 6.376349e-02 3.960345e-02 Mucinivorans 6.085416e-02 4.344629e-02 Aeromonas 3.216280e-02 5.116161e-02 Mycoplasma_L 2.602922e-02 8.972179e-02 Akkermansia 2.440550e-02 3.614255e-02 Odoribacter 2.389115e-02 2.235810e-02 JADFUS01 2.216792e-02 1.316718e-02 Hafnia 1.922885e-02 9.188555e-02 UBA866 1.817084e-02 2.179441e-02 Alistipes 1.625622e-02 1.344232e-02 Plesiomonas 1.460621e-02 3.266225e-02 Parabacteroides_B 1.344298e-02 1.263954e-02 Acinetobacter 1.342615e-02 2.724203e-02 Cetobacterium 1.241520e-02 2.123151e-02 Dielma 1.189375e-02 1.483388e-02 Clostridium 1.178483e-02 1.804656e-02 14-2 9.530791e-03 2.077519e-02 Bilophila 9.443387e-03 1.270499e-02 CAJGBR01 9.261016e-03 8.562777e-03 Angelakisella 7.718052e-03 7.686128e-03 Clostridium_Q 7.535231e-03 8.628377e-03 JAIHAL01 7.428449e-03 1.475536e-02 Gallibacteroides 7.109525e-03 8.651652e-03 Bacteroides_G 5.906571e-03 6.736493e-03 Hydrogenoanaerobacterium 5.795122e-03 6.095362e-03 Buttiauxella 5.526548e-03 1.517479e-02 SZUA-378 5.304805e-03 1.559558e-02 Malacoplasma 5.193336e-03 1.101657e-02 HGM05232 5.091676e-03 6.107022e-03 Hungatella_A 4.823985e-03 5.525123e-03 Anaerotruncus 4.430928e-03 4.607282e-03 Pseudoflavonifractor 3.911764e-03 4.052227e-03 Alistipes_A 3.867619e-03 3.658744e-03 Intestinimonas 3.801876e-03 3.660942e-03 Tidjanibacter 3.641420e-03 3.113585e-03 Anaerovorax 3.457110e-03 7.930141e-03 Anaerorhabdus 3.342681e-03 4.665953e-03 Paraclostridium 3.303535e-03 1.632282e-02 Gallalistipes 2.764951e-03 2.526439e-03 Avirikenella 2.703337e-03 4.073629e-03 Mobilisporobacter 2.643797e-03 4.233095e-03 UMGS1251 2.623868e-03 4.428322e-03 RGIG3102 2.550546e-03 4.796159e-03 Egerieousia 2.488889e-03 4.069053e-03 JAGAJR01 2.433883e-03 5.478338e-03 Craterilacuibacter 2.083279e-03 9.013217e-03 Copranaerobaculum 2.066120e-03 8.740585e-03 UMGS1202 1.928935e-03 2.061976e-03 Sarcina 1.883573e-03 3.313599e-03 JAAYQI01 1.821441e-03 2.177416e-03 Amedibacillus 1.771861e-03 2.511258e-03 JAHHTP01 1.702809e-03 2.122800e-03 Rikenella 1.556573e-03 2.583114e-03 Romboutsia_D 1.554865e-03 3.682587e-03 Evtepia 1.531626e-03 1.774639e-03 Ruthenibacterium 1.530835e-03 2.751232e-03 Deefgea 1.502709e-03 3.412014e-03 Intestinibacillus 1.498170e-03 1.772211e-03 Budvicia 1.431037e-03 6.773380e-03 Butyricimonas 1.422311e-03 1.973337e-03 Pseudomonas_E 1.420060e-03 2.808340e-03 JAGNZR01 1.273646e-03 4.170041e-03 Phocea 1.209038e-03 2.372714e-03 RGIG4140 1.207336e-03 6.396700e-03 Negativibacillus 1.182472e-03 1.519004e-03 WRKB01 1.173050e-03 2.875486e-03 Spyradomonas 1.153313e-03 1.963346e-03 Aminipila 1.114705e-03 2.324044e-03 Romboutsia_A 1.070399e-03 1.851798e-03 Serratia_A 1.045777e-03 3.540183e-03 CAKVBE01 1.027988e-03 3.204532e-03 JAEZVV01 9.378374e-04 2.509149e-03 RGIG8482 9.213532e-04 4.996540e-03 Coprobacter 9.079215e-04 1.527339e-03 RGIG7389 9.070330e-04 1.099182e-03 Massiliimalia 8.310581e-04 1.432050e-03 Shewanella 8.297368e-04 2.690699e-03 UBA7488 8.270131e-04 1.824546e-03 Robinsoniella 7.608379e-04 1.761894e-03 Coprobacillus 7.318328e-04 1.542562e-03 Bacilliculturomica 7.288853e-04 1.183076e-03 Kluyvera 7.218591e-04 3.082164e-03 JAJBUQ01 6.689051e-04 1.230310e-03 IOR16 6.685867e-04 9.975667e-04 UBA1174 6.599272e-04 3.520933e-03 Bradyrhizobium 6.440180e-04 2.407832e-03 HGM16780 6.169676e-04 2.571909e-03 MGBC133411 5.654305e-04 9.653080e-04 Amedibacterium 5.586566e-04 2.772281e-03 Citrobacter 4.794230e-04 1.553079e-03 Anaerotignum 4.725340e-04 1.010493e-03 Muricomes 4.633015e-04 6.762865e-04 Fimivivens 4.584178e-04 6.442620e-04 51-20 3.751337e-04 2.088656e-03 JAGPHI01 3.353114e-04 7.138362e-04 UBA1794 3.283644e-04 5.787967e-04 Yersinia 3.213296e-04 1.133201e-03 Longicatena 3.101858e-04 1.727042e-03 Massilioclostridium 2.871724e-04 6.480957e-04 Cryptoclostridium 2.807538e-04 6.721141e-04 CALXSC01 2.509121e-04 7.682134e-04 Hespellia 2.508300e-04 4.781272e-04 Dysosmobacter 2.451443e-04 4.863795e-04 Scatenecus 2.189717e-04 1.074567e-03 Faecalimonas 2.166638e-04 4.418007e-04 CAZU01 1.870860e-04 1.041651e-03 SIG603 1.481655e-04 2.720693e-04 Lactonifactor 1.397483e-04 5.021416e-04 Enterococcus 1.029579e-04 5.732451e-04 MGBC107952 2.552412e-05 7.936623e-05 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() #Per pond genus_summary %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus=factor(genus, levels=rev(genus_summary_sort %&gt;% pull(genus)))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.5) + facet_grid(.~environment)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) "],["alpha-diversity.html", "Chapter 6 Alpha diversity", " Chapter 6 Alpha diversity load(&quot;data/data.Rdata&quot;) # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% filter(genome %in% rownames(dist)) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) #Richness alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;richness&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_jitter(width = 0.2, show.legend = FALSE) + geom_boxplot(width = 0.5, alpha=0.5,outlier.shape = NA, show.legend = FALSE)+ scale_color_manual(values=treatment_colors)+ scale_fill_manual(values=treatment_colors) + facet_nested(. ~ environment+river, scales=&quot;free&quot;) + #facet per day and treatment coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Neutral alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_jitter(width = 0.2, show.legend = FALSE) + geom_boxplot(width = 0.5, alpha=0.5,outlier.shape = NA, show.legend = FALSE)+ scale_color_manual(values=treatment_colors)+ scale_fill_manual(values=treatment_colors) + facet_nested(. ~ environment+river, scales=&quot;free&quot;) + #facet per day and treatment coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Phylogenetic alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;phylogenetic&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_jitter(width = 0.2, show.legend = FALSE) + geom_boxplot(width = 0.5, alpha=0.5,outlier.shape = NA, show.legend = FALSE)+ scale_color_manual(values=treatment_colors)+ scale_fill_manual(values=treatment_colors) + facet_nested(. ~ environment+river, scales=&quot;free&quot;) + #facet per day and treatment coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Functional alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;functional&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_jitter(width = 0.2, show.legend = FALSE) + geom_boxplot(width = 0.5, alpha=0.5,outlier.shape = NA, show.legend = FALSE) + scale_color_manual(values=treatment_colors)+ scale_fill_manual(values=treatment_colors) + facet_nested(. ~ environment+river, scales=&quot;free&quot;) + #facet per day and treatment coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) "],["beta-diversity.html", "Chapter 7 Beta diversity 7.1 Permanova 7.2 Richness diversity plot 7.3 Neutral diversity plot 7.4 Phylogenetic diversity plot 7.5 Functional diversity plot", " Chapter 7 Beta diversity load(&quot;data/data.Rdata&quot;) beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, dist = dist) 7.1 Permanova #Richness betadisper(beta_q0n$C, sample_metadata$location) %&gt;% permutest(., pairwise = TRUE) adonis2(beta_q0n$S ~ treatment, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q0n$S))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q0n$S))) %&gt;% pull(location)) %&gt;% broom::tidy() %&gt;% tt() sample_metadata_row&lt;- column_to_rownames(sample_metadata, &quot;sample&quot;) sample_metadata_row &lt;- sample_metadata_row[labels(beta_q0n$S), ] pairwise.adonis2(beta_q0n$S ~ all, data=sample_metadata_row, perm = 999) #Neutral diversity betadisper(beta_q1n$C, sample_metadata$Origin) %&gt;% permutest(., pairwise = TRUE) adonis2(beta_q1n$C ~ Origin, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(Location)) %&gt;% broom::tidy() %&gt;% tt() sample_metadata_row&lt;- column_to_rownames(sample_metadata, &quot;sample&quot;) sample_metadata_row &lt;- sample_metadata_row[labels(beta_q0n$S), ] pairwise.adonis2(beta_q1n$S ~ all, data=sample_metadata_row, perm = 999) #Phylogenetic diversity betadisper(beta_q1p$C, sample_metadata$Origin) %&gt;% permutest(., pairwise = TRUE) adonis2(beta_q1p$C ~ Origin, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1p$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1p$C))) %&gt;% pull(Location)) %&gt;% broom::tidy() %&gt;% tt() #Functional diversity betadisper(beta_q1f$C, sample_metadata$Origin) %&gt;% permutest(., pairwise = TRUE) adonis2(beta_q1f$C ~ Origin, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1f$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1f$C))) %&gt;% pull(Location)) %&gt;% broom::tidy() %&gt;% tt() 7.2 Richness diversity plot beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(altitude, treatment) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = altitude, fill = altitude, shape = as.factor(treatment))) + geom_point(size = 4) + scale_color_manual(values = altitude_colors) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Temperature treatment&quot;) #+geom_text(aes(label = specimen), size=3) 7.3 Neutral diversity plot beta_q1n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(altitude, treatment) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = altitude, fill = altitude, shape = as.factor(treatment))) + geom_point(size = 4) + scale_color_manual(values = altitude_colors)+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Temperature treatment&quot;) 7.4 Phylogenetic diversity plot beta_q1p$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(altitude, treatment) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = altitude, fill = altitude, shape = as.factor(treatment))) + geom_point(size = 4) + scale_color_manual(values = altitude_colors)+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Temperature treatment&quot;) 7.5 Functional diversity plot beta_q1f$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(altitude, treatment) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = altitude, fill = altitude, shape = as.factor(treatment))) + geom_point(size = 4) + scale_color_manual(values = altitude_colors) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Temperature treatment&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
